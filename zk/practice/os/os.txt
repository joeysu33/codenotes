1.设备管理, 数组描述
  <1>FIFO
  <2>High Priority First (HPF)

/*!
设备类表*/
struct DeviceClass{
    string m_name; /*! 设备类名称*/
    int m_count;   /*! 设备类的数目*/
    int m_freeCount; /*! 剩余可使用的设备*/
    int m_startAddress; /*! 该类设备在设备表中的起始索引值*/
};

/*!
设备表*/
struct Device {
    int m_absNo; /*! 设备的绝对号 */
    int m_status; /*! 设备的状态 0:坏 1:好*/
    int m_used;  /*! 设备是否正在使用*/
    string m_jobName; /*! 占用设备的作业名称 */
    int m_relNo; /*! 设备的相对号 */
};

2.进程调度, 链表描述
  <1>FIFO
  <2>HPF
  <3>不可强占式/可强占式
  <4>时间片轮转
  <5>最小周转
  <6>最小任务先执行(时间最短)

/*!
struct PCB {
    string m_name;
    int m_status; /* 0:Closed, 1:Running, 2:Ready, 3:Block */
    int m_timein; /*! 进入时间 */
    int m_execute_time; /*!执行时间 */
    int m_endtime; /*!结束时间*/
    int m_precedence; /*! 进程的优先级 */
    struct PCB *m_next;
};

3.位示图法, 数组描述
每一位代表一个内存块，总共有几个块就代表几个内存区域，找到能满足该区域
大小的块空间的二位索引, 使用二维数组来描述内存块。(一维数组也是可以的)

4.固定分区, 数组描述
struct FixedMem {
    int m_number; /*! 分区号*/
    int m_length; /*! 分区大小 */
    int m_startAddress; /*! 起始地址 */
    int m_status; /*! 分区状态 0:占用, 1:未占用 */
    string m_jobName; /*! 占用该分区的作业名称 */
};

5.文件输出与输出
fstream
ifstream
ofstream















